Your first program

To compile and run a simple program, first choose a package path (we'll use github.com/user/hello) and create a corresponding package directory inside your workspace: 
$ mkdir $GOPATH/src/github.com/user/hello


Next, create a file named hello.go inside that directory, containing the following Go code. 
package main

import "fmt"

func main() {
    fmt.Printf("Hello, world.\n")
}


Now you can build and install that program with the go tool: 
$ go install github.com/user/hello


Note that you can run this command from anywhere on your system. The go tool finds the source code by looking for the github.com/user/hello package inside the workspace specified by GOPATH. 

You can also omit the package path if you run go install from the package directory: 
$ cd $GOPATH/src/github.com/user/hello
$ go install


This command builds the hello command, producing an executable binary. It then installs that binary to the workspace's bin directory as hello (or, under Windows, hello.exe). In our example, that will be $GOPATH/bin/hello, which is $HOME/work/bin/hello. 

The go tool will only print output when an error occurs, so if these commands produce no output they have executed successfully. 

You can now run the program by typing its full path at the command line: 
$ $GOPATH/bin/hello
Hello, world.


Or, as you have added $GOPATH/bin to your PATH, just type the binary name: 
$ hello
Hello, world.


If you're using a source control system, now would be a good time to initialize a repository, add the files, and commit your first change. Again, this step is optional: you do not need to use source control to write Go code. 
$ cd $GOPATH/src/github.com/user/hello
$ git init
Initialized empty Git repository in /home/user/work/src/github.com/user/hello/.git/
$ git add hello.go
$ git commit -m "initial commit"
[master (root-commit) 0b4507d] initial commit
 1 file changed, 1 insertion(+)
  create mode 100644 hello.go


Pushing the code to a remote repository is left as an exercise for the reader. 
